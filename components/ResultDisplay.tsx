
import React from 'react';
import PptxGenJS from 'pptxgenjs';
import { Presentation } from '../types';
import { VideoIcon } from './icons/VideoIcon';
import { PresentationIcon } from './icons/PresentationIcon';

interface ResultDisplayProps {
  videoUrl: string | null;
  pptContent: Presentation | null;
}

const ResultDisplay: React.FC<ResultDisplayProps> = ({ videoUrl, pptContent }) => {
  const downloadPptx = () => {
    if (!pptContent) return;

    const pptx = new PptxGenJS();
    pptx.layout = 'LAYOUT_WIDE';
    pptx.author = 'AI Invitation Generator';
    pptx.company = 'Generated by Gemini';
    pptx.title = 'Invitation Presentation';

    // Define a theme for the presentation
    const theme = {
      background: { color: '1E293B' }, // slate-800
      titleColor: 'A78BFA', // purple-400
      bodyColor: 'F1F5F9', // slate-100
    };

    // Master slide for the title page
    pptx.defineSlideMaster({
      title: 'TITLE_SLIDE',
      background: theme.background,
      objects: [
        {
          text: {
            text: 'Title Placeholder',
            options: {
              x: 0.5, y: 2.0, w: '90%', h: 1.5,
              fontSize: 48, bold: true, color: theme.titleColor, align: 'center',
            },
          },
        },
        {
          text: {
            text: 'Subtitle Placeholder',
            options: {
              x: 0.5, y: 3.5, w: '90%', h: 1.0,
              fontSize: 24, color: theme.bodyColor, align: 'center',
            },
          },
        },
      ],
    });

    // Master slide for content pages
    pptx.defineSlideMaster({
      title: 'CONTENT_SLIDE',
      background: theme.background,
      objects: [
        {
          text: {
            text: 'Title Placeholder',
            options: {
              x: 0.5, y: 0.25, w: '90%', h: 1.0,
              fontSize: 36, bold: true, color: theme.titleColor,
            },
          },
        },
        {
          text: {
            text: 'Body Placeholder',
            options: {
              x: 0.5, y: 1.5, w: '90%', h: 5.0,
              fontSize: 20, color: theme.bodyColor, bullet: true,
            },
          },
        },
      ],
    });

    // Create slides from the generated content
    pptContent.slides.forEach((slideData, index) => {
      if (index === 0) { // Title Slide
        const slide = pptx.addSlide({ masterName: 'TITLE_SLIDE' });
        slide.addText(slideData.title, { placeholder: 'Title Placeholder' });
        if (slideData.content && slideData.content.length > 0) {
          slide.addText(slideData.content.join('\n'), { placeholder: 'Subtitle Placeholder' });
        }
      } else { // Content Slides
        const slide = pptx.addSlide({ masterName: 'CONTENT_SLIDE' });
        slide.addText(slideData.title, { placeholder: 'Title Placeholder' });
        slide.addText(slideData.content, { placeholder: 'Body Placeholder' });
      }
    });

    pptx.writeFile({ fileName: 'invitation_presentation.pptx' });
  };

  const downloadJson = () => {
    if (!pptContent) return;

    const jsonString = JSON.stringify(pptContent, null, 2);
    const blob = new Blob([jsonString], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'invitation_content.json';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="max-w-3xl mx-auto mt-10 grid grid-cols-1 gap-8">
      {/* Video Result */}
      {videoUrl && (
        <div className="bg-slate-800/50 p-6 rounded-2xl shadow-lg backdrop-blur-sm border border-slate-700">
          <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
            <VideoIcon />
            Your Invitation Video
          </h2>
          <video controls className="w-full rounded-lg" key={videoUrl}>
            <source src={videoUrl} type="video/mp4" />
            Your browser does not support the video tag.
          </video>
        </div>
      )}

      {/* PPT Result */}
      {pptContent && (
        <div className="bg-slate-800/50 p-6 rounded-2xl shadow-lg backdrop-blur-sm border border-slate-700">
          <div className="flex justify-between items-start mb-4">
             <h2 className="text-2xl font-bold flex items-center gap-2 pt-4">
              <PresentationIcon />
              Presentation Content
            </h2>
            <div className="flex items-center gap-3">
               <button
                onClick={downloadJson}
                className="bg-purple-600 text-white font-bold px-5 py-3 rounded-lg hover:bg-purple-700 transition-colors duration-300 shadow-lg flex flex-col items-center leading-tight"
              >
                <span>Download</span>
                <span>JSON</span>
              </button>
               <button
                onClick={downloadPptx}
                className="bg-slate-600 text-white font-bold px-5 py-3 rounded-lg hover:bg-slate-700 transition-colors duration-300 shadow-lg flex flex-col items-center leading-tight"
              >
                <span>Download</span>
                <span>PPTX</span>
              </button>
            </div>
          </div>
          <div className="space-y-4 max-h-96 overflow-y-auto pr-2">
            {pptContent.slides.map((slide, index) => (
              <div key={index} className="bg-slate-700 p-4 rounded-lg">
                <h3 className="font-bold text-purple-400 text-lg">{slide.title}</h3>
                <ul className="list-disc list-inside mt-2 text-gray-300">
                  {slide.content.map((item, i) => (
                    <li key={i}>{item}</li>
                  ))}
                </ul>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default ResultDisplay;